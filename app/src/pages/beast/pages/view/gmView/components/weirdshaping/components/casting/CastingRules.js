import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import '../../Weirdshaping.css';
export default function CastingRules({ index, spellnumberdie = '' }) {
    const explanationDictionary = [augurExplanation, wildMagicExplanation, vancianExplanation(spellnumberdie), manifestingExplanation, adamicCommandingExplanation, bloodPactExplanation];
    return explanationDictionary[index];
}
const augurExplanation = (_jsxs(_Fragment, { children: [_jsxs("p", { children: [_jsx("strong", { children: "Shaping Time" }), " 3 seconds"] }), _jsxs("p", { children: [_jsx("strong", { children: "Fallout" }), " 10 Stress"] }), _jsx("p", {}), _jsx("p", { children: "When you cast a spell, roll a d20 whenever you cast." }), _jsx("p", {}), _jsx("p", { children: "5 is range." }), _jsx("p", { children: "4 is effect & range." }), _jsx("p", { children: "3 is interval." }), _jsx("p", { children: "2 is effect & interval." }), _jsx("p", { children: "1 is effect." }), _jsx("p", {}), _jsx("p", { children: "Rolling a thing doubles the value of the thing(s) rolled." }), _jsx("p", { children: "Everything else has no bonus." })] }));
const wildMagicExplanation = (_jsxs(_Fragment, { children: [_jsxs("p", { children: [_jsx("strong", { children: "Shaping Time" }), " 7 seconds"] }), _jsxs("p", { children: [_jsx("strong", { children: "Fallout" }), " 5 Stress"] }), _jsx("p", {}), _jsx("p", { children: "Range, Duration, and Effect have random modifiers." }), _jsx("p", {}), _jsx("p", { children: "Range is modified by d10! - 5: this is added or subtracted from the second to right\u2019s digit place" }), _jsx("p", { children: "Interval is modified by d6! - 3" }), _jsx("p", { children: "Effect is modified by d20! - 10" }), _jsx("p", {}), _jsx("p", { children: "If 2 dice explode, a Wild Surge occurs: double everything." })] }));
const vancianExplanation = (spellnumberdie) => {
    return (_jsxs(_Fragment, { children: [_jsxs("p", { children: [_jsx("strong", { children: "Spell Number Die" }), " ", spellnumberdie] }), _jsxs("p", { children: [_jsx("strong", { children: "Fallout" }), " None"] }), _jsx("p", {}), _jsx("p", { children: "When you cast a spell, roll the Spell Number Die: on a 1, that dice shrinks one dice size." }), _jsx("p", {}), _jsx("p", { children: "You can get additional points to buff the spell but that increases the chance of shrinking the Spell Number Die." }), _jsx("p", { children: "So, if you start with a d8 and want 3 additional points to spend to buff the spell, if you roll 1 - 4, that dice shrinks to a d6." }), _jsx("p", {}), _jsx("p", { children: "You can\u2019t get a bonus higher than the dice size - 1 (so, for a d8, the highest bonus is +7)" }), _jsx("p", {}), _jsx("p", { children: "When your dice shrinks to below a d4, you\u2019ve run out of spells." }), _jsx("p", {}), _jsx("p", { children: "Victims recieve a save: d20! + d10! + 10 vs d20! + their level." })] }));
};
const manifestingExplanation = (_jsxs(_Fragment, { children: [_jsx("p", { children: "The longer you wait, the more points you get to spend." }), _jsx("p", {}), _jsx("p", { children: "You get 1 point per 10 seconds, compounding (1 after 10 secs, 2 after 20 secs, 4 after 30 secs, 8 after 40 secs, etc)" }), _jsx("p", {}), _jsxs("p", { children: [_jsx("strong", { children: "Fallout" }), " 1 damage for each point added to the pool"] })] }));
const adamicCommandingExplanation = (_jsxs(_Fragment, { children: [_jsxs("p", { children: [_jsx("strong", { children: "Fallout" }), " 6 Stress + 1 for each spell spoken in the last 24 hours"] }), _jsx("p", {}), _jsx("p", { children: "Shaping time is random and based around d4!s; the result is the shaping time in seconds AND the points you can use to modify the spell." }), _jsx("p", { children: "This is applied to effect, interval, or range but is applied per dice, although they can be doubled up." }), _jsx("p", {}), _jsx("p", { children: "So, if you roll 4 d4!s and get a 1, a 3, a 3, and a 2. You can apply the first die to the effect (giving it 1 point), the second and third to the interval (giving it 6 points), and the fourth to the range (giving it 3 points) and a total casting time of 9 seconds." })] }));
const bloodPactExplanation = (_jsxs(_Fragment, { children: [_jsx("p", { children: "Deal 1 point of damage per second for each person with 10 ft (including the weird-adept): gain 1 point each time damage done regardless of how much." }), _jsx("p", { children: "Whenever someone takes damage within 25ft, gain 1 point." }), _jsx("p", {}), _jsx("p", { children: "Each spell takes a minimum of 10 points to cast: additional points beyond that can be used to buff the spell." })] }));
